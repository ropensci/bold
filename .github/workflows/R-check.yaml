on: [push, pull_request]

name: R-check

jobs:
  R-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: 'release'}
        - { os: macOS-latest, r: 'release'}
        - {os: ubuntu-latest,   r: 'release'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v3

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - name: Install dependencies
       run: |
         install.packages("stringi", type="source")
         remotes::install_deps(dependencies = TRUE)
         remotes::install_cran(c("rcmdcheck", "BiocManager"))
         BiocManager::install("sangerseqR")
       shell: Rscript {0}

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true

      #- name: Query dependencies
      #  run: |
      #    install.packages('remotes')
      #    saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
      #    writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
      #  shell: Rscript {0}

      #- name: Cache R packages
      #  if: runner.os != 'Windows'
      #  uses: actions/cache@v1
      #  with:
      #    path: ${{ env.R_LIBS_USER }}
      #    key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
      #    restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      #- name: Install system dependencies
      #  if: runner.os == 'Linux'
      #  run: |
      #    while read -r cmd
      #    do
      #      eval sudo $cmd
      #    done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      # - name: Install system dependencies
      #   if: runner.os == 'Linux'
      #   env:
      #     RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
      #   run: |
      #     Rscript -e "remotes::install_github('r-hub/sysreqs')"
      #     sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
      #     sudo -s eval "$sysreqs"

      # - name: Check
      #   env:
      #     _R_CHECK_CRAN_INCOMING_: false
      #   run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "error", check_dir = "check")
      #   shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'release'
        run: |
          Rscript -e 'install.packages("covr")' -e 'covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")'
